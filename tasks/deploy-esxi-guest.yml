- name: == ESXi == Generate kickstart file[s] for QA node[s]  
  template: 
    src: ../templates/kickstarts/c{{ centos_dist }}-esxi-guest.cfg.j2
    dest: /var/www/qa/ks/{{ inventory_hostname }}-ks.cfg 
    mode: 0755
  delegate_to: "{{ ks_node }}" 
  
- name: == ESXi == Generating the tftp configuration boot file
  template: 
    src: ../templates/pxeboot.j2
    dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ mac_address | lower | replace(":","-") }} 
    mode: 0755
  delegate_to: "{{ tftpd_node }}"

- name: == ESXi == Checking if previous VM still exists
  raw: vim-cmd vmsvc/getallvms|grep -q {{ inventory_hostname }} && echo -n running || echo -n notrunning
  register: guest_running
  delegate_to: "{{ esxi_host }}"

- name: == ESXi == Destroying previous VM
  raw: vim-cmd vmsvc/power.off $(vim-cmd vmsvc/getallvms|grep {{ inventory_hostname }}| awk '{print $1}') ; vim-cmd vmsvc/unregister $(vim-cmd vmsvc/getallvms|grep {{ inventory_hostname }}| awk '{print $1}') ; rm -Rf /vmfs/volumes/{{ esxi_vmfs_vol }}/{{ inventory_hostname}}
  delegate_to: "{{ esxi_host }}"
  when: guest_running.stdout == "running"

- name: == ESXi == Creating directory structure for ESXi guest
  raw: mkdir -p /vmfs/volumes/{{ esxi_vmfs_vol }}/{{ inventory_hostname}}
  delegate_to: "{{ esxi_host }}"

- name: == ESXi == Creating virtual disk for ESXi guest
  raw: vmkfstools --createvirtualdisk 10000M --diskformat thin /vmfs/volumes/{{ esxi_vmfs_vol }}/{{ inventory_hostname}}/{{ inventory_hostname }}.vmdk
  delegate_to: "{{ esxi_host }}"

- name: == ESXi == Generating local VMX template
  template:
    src: ../templates/esxi_vm.vmx.j2
    dest: /var/www/qa/vmx/{{ inventory_hostname }}.vmx
  delegate_to: "{{ ks_node }}"

- name: == ESXi == Importing VMX file to esxi host
  raw: wget -q -O /vmfs/volumes/{{ esxi_vmfs_vol }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx http://mirror.centos.org/vmx/{{ inventory_hostname }}.vmx
  delegate_to: "{{ esxi_host }}"

- name: == ESXi == Registering ESXi guest
  raw: vim-cmd solo/registervm /vmfs/volumes/{{ esxi_vmfs_vol }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx 
  delegate_to: "{{ esxi_host }}"

- name: == ESXi == Starting VM
  raw: vim-cmd vmsvc/power.on $(vim-cmd vmsvc/getallvms|grep {{ inventory_hostname }}| awk '{print $1}')
  delegate_to: "{{ esxi_host }}"

- name: == ESXi == Waiting for sshd to be available on the deployed node
  wait_for: port=22 host={{ ip }} timeout=1800 
  delegate_to: "{{ ks_node }}"

  
